{"componentChunkName":"component---src-templates-docs-tsx","path":"/docs/team-style-cn","webpackCompilationHash":"02104d362a19dbd2678b","result":{"data":{"markdownRemark":{"html":"<p>一个好的代码风格可以方便其他开发人员快速熟悉、上手开发工作，也方便自己快速查找定位问题。</p>\n<h2 id=\"注释\">注释<a href=\"#%E6%B3%A8%E9%87%8A\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>文件顶部的注释，包括描述、作者、日期</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * @description 描述改文件的用途\n * @create xxg\n * @createdDate 2019-09-09\n */</span></code></pre></div>\n<ul>\n<li>模块的注释</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * 格式化日期\n * @param  {string}  data   要格式化的日期\n * @param  {format} [format='yyyy-MM-dd'] 格式，默认为yyyy-MM-dd\n * @return {string}         返回格式化后的字符串\n */</span></code></pre></div>\n<ul>\n<li>业务代码注释</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/*业务代码注释*/</span></code></pre></div>\n<ul>\n<li>接口注释</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRouteMenu</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   *路由列表\n   */</span>\n  routes<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"引用组件顺序\">引用组件顺序<a href=\"#%E5%BC%95%E7%94%A8%E7%BB%84%E4%BB%B6%E9%A1%BA%E5%BA%8F\" aria-hidden class=\"anchor\">#</a></h2>\n<p>先引用外部组件库,再引用系统级全局库(最外层的先引用)、再引用当前组件块级组件、最后是 css 样式</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Dropdown<span class=\"token punctuation\">,</span> Menu<span class=\"token punctuation\">,</span> Icon <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SelectPlus <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'wetrial'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ScrollBar <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/ScrollBar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> IListProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interface'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./index.less'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"引号\">引号<a href=\"#%E5%BC%95%E5%8F%B7\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>常量字符串使用单引号</li>\n<li>react 组件中的属性使用双引号</li>\n<li>字符串拼接使用 es6 的反引号</li>\n</ul>\n<h2 id=\"缩进、分号\">缩进、分号<a href=\"#%E7%BC%A9%E8%BF%9B%E3%80%81%E5%88%86%E5%8F%B7\" aria-hidden class=\"anchor\">#</a></h2>\n<p>系统中已经配置了一套规则，会在保存的时候自动格式化代码</p>\n<h2 id=\"括号\">括号<a href=\"#%E6%8B%AC%E5%8F%B7\" aria-hidden class=\"anchor\">#</a></h2>\n<p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 不推荐</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 推荐做法</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"数组、对象\">数组、对象<a href=\"#%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>对象属性名不需要加引号</li>\n<li>对象以缩进的形式书写，不要写在一行</li>\n<li>数组最后不要有逗号</li>\n<li>对象最后不要有逗号</li>\n</ul>\n<h2 id=\"命名\">命名<a href=\"#%E5%91%BD%E5%90%8D\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>类名: 大驼峰式风格，字母和数字，例如：AbcTest。禁止汉字、特殊符号，禁止非大驼峰式风格</li>\n<li>函数名、变量名: 小驼峰式风格，字母和数字，例如：abcTest。禁止汉字、特殊符号，禁止非小驼峰式风格，例如 snake_case 等</li>\n<li>常量字符串:全大写风格，大写字母、数字和下划线，单词之间以下划线分隔，例如：ABC_TEST。禁止汉字、特殊符号、小写字母</li>\n<li>组件、页面:文件夹大驼峰式风格、文件名(除 index、layout 外)其他一律大写</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">├─src\n│  │  app.ts\n│  │  defaultSettings.ts\n│  │  global.less\n│  │  global.tsx\n│  │  service-worker.ts\n│  ├─b-components\n│  ├─components\n│  ├─constants\n│  │      index.ts\n│  │      permissions.js\n│  ├─models\n│  │      user.ts\n│  │      global.ts\n│  ├─pages\n│  │  ├─Example\n│  │  │ ├─List\n│  │  │ │ ├─index.tsx\n│  │  │ │ ├─model.ts\n│  │  │ │ ├─service.ts\n│  │  │ │ ├─View.tsx\n│  ├─services\n│  │      authority.test.ts\n│  ├─utils\n│  │      authority.test.ts\n│  │      authority.ts\n└─typings</code></pre></div>\n<ul>\n<li>组件中回调属性：使用 onXxx</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>onXXX 绑定的事件：使用 handleXXXX</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlePay<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">支付</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>接口命名前面带上 I 表示 interface</li>\n<li>类型命名签名带上 T 表示 Type</li>\n<li>使用 withXxx 形式的词作为高阶组件的名称</li>\n</ul>\n<h2 id=\"interface-声明顺序\">interface 声明顺序<a href=\"#interface-%E5%A3%B0%E6%98%8E%E9%A1%BA%E5%BA%8F\" aria-hidden class=\"anchor\">#</a></h2>\n<p>日常用到比较多的是四种，只读参数放第一位，必选参数第二位，可选参数次之，不确定参数放最后</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  height<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"ts-好用的相关工具泛型\">ts 好用的相关工具泛型<a href=\"#ts-%E5%A5%BD%E7%94%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E6%B3%9B%E5%9E%8B\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>Record&#x3C;string,any> 用这个来声明对象结构的类型</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 用于定义一个ts对象，key是字符串，value是任意类型</span>\n<span class=\"token keyword\">const</span> people<span class=\"token punctuation\">:</span>Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'chengfeng'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></code></pre></div>\n<ul>\n<li>Partial 作用是将传入的属性变为可选项.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPeople</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 定义的结构可以是接口IPeople的任意key</span>\n<span class=\"token keyword\">const</span> people<span class=\"token punctuation\">:</span> Partial<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IPeople</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = </span><span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre></div>\n<ul>\n<li>Readonly 作用是将传入的属性变为变成只读</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPeople</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// title name属性就是只读的了</span>\n<span class=\"token keyword\">const</span> people<span class=\"token punctuation\">:</span> Readonly<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = </span><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> chenfeng<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre></div>\n<ul>\n<li>Required 的作用是将传入的属性变为必选项</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPeople</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> people<span class=\"token punctuation\">:</span> Required<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IPeople</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = </span><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'ts'</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\">; // Error: property 'name' missing</span></code></pre></div>\n<blockquote>\n<p><a href=\"https://github.com/Microsoft/TypeScript-Handbook/diffs/0?base_sha=22b37a2d8c9a1dd378795444baf954c2e7ecccf5&#x26;commentable=true&#x26;head_user=csantos42&#x26;pull_number=801&#x26;sha1=22b37a2d8c9a1dd378795444baf954c2e7ecccf5&#x26;sha2=9d4c56f5d414dbe23780719885baa3df40222412&#x26;short_path=0b2da51&#x26;unchanged=expanded&#x26;utf8=%E2%9C%93#requiredt\">查看更多</a></p>\n</blockquote>\n<h2 id=\"ts-一些好用的小-tips\">ts 一些好用的小 tips<a href=\"#ts-%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8F-tips\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>keyof</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPeople</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> IPeople<span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> \"name\" | \"age\"</span></code></pre></div>\n<ul>\n<li>in</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> Keys <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// -> { a: any, b: any }</span>\n<span class=\"token keyword\">type</span> Obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>p <span class=\"token keyword\">in</span> Keys<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"其他规范\">其他规范<a href=\"#%E5%85%B6%E4%BB%96%E8%A7%84%E8%8C%83\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>不要使用 var 声明变量</li>\n<li>不会被修改的变量使用 const 声明</li>\n<li>去除声明但未被引用的代码</li>\n<li>禁止在代码里使用 debug</li>\n<li>不允许有空的代码块(代码保存的时候会自动去掉)</li>\n<li>禁止 console.log 调试信息</li>\n</ul>\n<h2 id=\"react-组件规范\">react 组件规范<a href=\"#react-%E7%BB%84%E4%BB%B6%E8%A7%84%E8%8C%83\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>如果不自己优化 render 性能，尽量用 PureComponent 代替 Component</li>\n<li>简单的组件尽量使用函数组件，使用 useState、useEffect 等</li>\n</ul>\n<h2 id=\"render-里面计算型数据尽量缓存，使用-momoize-one\">render 里面计算型数据尽量缓存，使用 momoize-One<a href=\"#render-%E9%87%8C%E9%9D%A2%E8%AE%A1%E7%AE%97%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%B0%BD%E9%87%8F%E7%BC%93%E5%AD%98%EF%BC%8C%E4%BD%BF%E7%94%A8-momoize-one\" aria-hidden class=\"anchor\">#</a></h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> memoizeOne <span class=\"token keyword\">from</span> <span class=\"token string\">'memoize-one'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">/**\n * 对数据源按key进行相邻行合并，返回生成的跨行对象,建议使用memoizeOne进行缓存调用\n * @param list 要进行合并的数据源列表\n * @param key key\n * @example mergeCells([{name:'xxg',title:'code'},{name:'刘德华',title:'code'},{name:'古天乐',title:'other'}],'title')==>{0:2,1:0,2:1}\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> mergeCells<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(list: T[], key: string | ((item: T) => string)): IKeyValue </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mergeObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> startIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  list <span class=\"token operator\">&amp;&amp;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> curValue<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> preValue<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> key <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        curValue <span class=\"token operator\">=</span> item<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        preValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        curValue <span class=\"token operator\">=</span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        preValue <span class=\"token operator\">=</span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      mergeObj<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curValue <span class=\"token operator\">===</span> preValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mergeObj<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        mergeObj<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        startIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> mergeObj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nconst editionDisplayNameMergeCell = memoizeOne(mergeCells);\n\n</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">'版本'</span><span class=\"token punctuation\">,</span>\n  dataIndex<span class=\"token punctuation\">:</span> <span class=\"token string\">'editionDisplayName'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      pagedData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 因为render会频繁调用，此处计算得到的数据源基本是固定的，所以使用缓存 重复调用从缓存中获取哦</span>\n    <span class=\"token keyword\">const</span> rowSpanMap <span class=\"token operator\">=</span> <span class=\"token function\">editionDisplayNameMergeCell</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token string\">'editionDisplayName'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      children<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n      props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        rowSpan<span class=\"token punctuation\">:</span> rowSpanMap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"在-componentwillunmount-里面去除副作用的函数\">在 componentWillUnmount 里面去除副作用的函数<a href=\"#%E5%9C%A8-componentwillunmount-%E9%87%8C%E9%9D%A2%E5%8E%BB%E9%99%A4%E5%89%AF%E4%BD%9C%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>清除 EventListener</li>\n<li>中止数据请求</li>\n<li>清除定时器</li>\n</ul>\n<h2 id=\"react-中的-key\">react 中的 key<a href=\"#react-%E4%B8%AD%E7%9A%84-key\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>对于组件中的 key 优化，起到最大化重用 dom</li>\n<li>尽量别使用 index 作为 key</li>\n</ul>\n<h2 id=\"防止-xss-攻击\">防止 xss 攻击<a href=\"#%E9%98%B2%E6%AD%A2-xss-%E6%94%BB%E5%87%BB\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>input，textarea 等标签，不要直接把 html 文本直接渲染在页面上,使用 xssb 等过滤之后再输出到标签上;</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> html2text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'xss'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n  <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    __html<span class=\"token punctuation\">:</span> <span class=\"token function\">html2text</span><span class=\"token punctuation\">(</span>htmlContent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"在组件中获取真实-dom\">在组件中获取真实 dom<a href=\"#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9E-dom\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>使用 16 版本后的 createRef()函数</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>IProps<span class=\"token punctuation\">,</span> IState<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"减少魔法数字\">减少魔法数字<a href=\"#%E5%87%8F%E5%B0%91%E9%AD%94%E6%B3%95%E6%95%B0%E5%AD%97\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>写代码的时候尽量减少一些未知含义的数字，尽量用枚举,例如 type === 0 的时候做了一些操作，让人不知所以然。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">READY</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FETCHING</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FAILED</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">READY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// best</span>\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">STATUS</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 就绪</span>\n  <span class=\"token constant\">READY</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 请求中</span>\n  <span class=\"token constant\">FETCHING</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 请求失败</span>\n  <span class=\"token constant\">FAILED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"event-事件对象类型\">Event 事件对象类型<a href=\"#event-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>很多小伙伴用了很久的 ts,都不知道常用 Event 事件对象类型：</li>\n<li>ClipboardEvent&#x3C;T = Element> 剪贴板事件对象</li>\n<li>DragEvent&#x3C;T = Element> 拖拽事件对象</li>\n<li>ChangeEvent&#x3C;T = Element> Change 事件对象</li>\n<li>KeyboardEvent&#x3C;T = Element> 键盘事件对象</li>\n<li>MouseEvent&#x3C;T = Element> 鼠标事件对象</li>\n<li>TouchEvent&#x3C;T = Element> 触摸事件对象</li>\n<li>WheelEvent&#x3C;T = Element> 滚轮事件对象</li>\n<li>AnimationEvent&#x3C;T = Element> 动画事件对象</li>\n<li>TransitionEvent&#x3C;T = Element> 过渡事件对象</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MouseEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> MouseEvent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HTMLDivElement</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">): void;\n}</span></code></pre></div>\n<h2 id=\"使用私有属性取代-state-状态\">使用私有属性取代 state 状态<a href=\"#%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%8F%96%E4%BB%A3-state-%E7%8A%B6%E6%80%81\" aria-hidden class=\"anchor\">#</a></h2>\n<ul>\n<li>对于一些不需要控制 ui 的状态属性，我们可以直接绑到 this 上， 即私有属性，没有必要弄到 this.state 上，不然会触发渲染机制，造成性能浪费 例如请求翻页数据的时候,我们都会有个变量</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// bad</span>\nstate<span class=\"token punctuation\">:</span> IState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  pageNo<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  pageSize<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\nqueryParams<span class=\"token punctuation\">:</span>Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  pageNo<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  pageSize<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"代码细粒度的思考\">代码细粒度的思考<a href=\"#%E4%BB%A3%E7%A0%81%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E6%80%9D%E8%80%83\" aria-hidden class=\"anchor\">#</a></h2>\n<p>写组件或者函数的时候，工具函数和业务逻辑抽离，表单校验和业务抽离、事件函数和业务抽离，ajax 和业务抽离。<br>\n例如有些页面是通过 location.href 跳转的，我们有些业务逻辑等都是放到 didMount,但是后期改需求，可能要用 react-router 进行跳转，可能要改的逻辑就会很多了，所以函数抽离出来，需求更新就少改一点代码。如果还不确定如何划分函数的细粒度，我有个建议。使用过两次以上的代码，要抽离组件或者函数，两次的可以不用</p>\n<h2 id=\"可以不挂在载组件内部的，尽量不要放在组件内部\">可以不挂在载组件内部的，尽量不要放在组件内部<a href=\"#%E5%8F%AF%E4%BB%A5%E4%B8%8D%E6%8C%82%E5%9C%A8%E8%BD%BD%E7%BB%84%E4%BB%B6%E5%86%85%E9%83%A8%E7%9A%84%EF%BC%8C%E5%B0%BD%E9%87%8F%E4%B8%8D%E8%A6%81%E6%94%BE%E5%9C%A8%E7%BB%84%E4%BB%B6%E5%86%85%E9%83%A8\" aria-hidden class=\"anchor\">#</a></h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// bad</span>\n<span class=\"token function-variable function\">renderHeader</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">renderBody</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">renderFooter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      renderHeader()\n      renderBody()\n      renderFooter()\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">RenderHeader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">RenderBody</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">RenderFooter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>iProps<span class=\"token punctuation\">,</span> iState<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RenderHeader</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RenderBody</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RenderFooter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/docs/team-style-cn/#%E6%B3%A8%E9%87%8A\">注释</a></li>\n<li><a href=\"/docs/team-style-cn/#%E5%BC%95%E7%94%A8%E7%BB%84%E4%BB%B6%E9%A1%BA%E5%BA%8F\">引用组件顺序</a></li>\n<li><a href=\"/docs/team-style-cn/#%E5%BC%95%E5%8F%B7\">引号</a></li>\n<li><a href=\"/docs/team-style-cn/#%E7%BC%A9%E8%BF%9B%E3%80%81%E5%88%86%E5%8F%B7\">缩进、分号</a></li>\n<li><a href=\"/docs/team-style-cn/#%E6%8B%AC%E5%8F%B7\">括号</a></li>\n<li><a href=\"/docs/team-style-cn/#%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1\">数组、对象</a></li>\n<li><a href=\"/docs/team-style-cn/#%E5%91%BD%E5%90%8D\">命名</a></li>\n<li><a href=\"/docs/team-style-cn/#interface-%E5%A3%B0%E6%98%8E%E9%A1%BA%E5%BA%8F\">interface 声明顺序</a></li>\n<li><a href=\"/docs/team-style-cn/#ts-%E5%A5%BD%E7%94%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E6%B3%9B%E5%9E%8B\">ts 好用的相关工具泛型</a></li>\n<li><a href=\"/docs/team-style-cn/#ts-%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8F-tips\">ts 一些好用的小 tips</a></li>\n<li><a href=\"/docs/team-style-cn/#%E5%85%B6%E4%BB%96%E8%A7%84%E8%8C%83\">其他规范</a></li>\n<li><a href=\"/docs/team-style-cn/#react-%E7%BB%84%E4%BB%B6%E8%A7%84%E8%8C%83\">react 组件规范</a></li>\n<li><a href=\"/docs/team-style-cn/#render-%E9%87%8C%E9%9D%A2%E8%AE%A1%E7%AE%97%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%B0%BD%E9%87%8F%E7%BC%93%E5%AD%98%EF%BC%8C%E4%BD%BF%E7%94%A8-momoize-one\">render 里面计算型数据尽量缓存，使用 momoize-One</a></li>\n<li><a href=\"/docs/team-style-cn/#%E5%9C%A8-componentwillunmount-%E9%87%8C%E9%9D%A2%E5%8E%BB%E9%99%A4%E5%89%AF%E4%BD%9C%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0\">在 componentWillUnmount 里面去除副作用的函数</a></li>\n<li><a href=\"/docs/team-style-cn/#react-%E4%B8%AD%E7%9A%84-key\">react 中的 key</a></li>\n<li><a href=\"/docs/team-style-cn/#%E9%98%B2%E6%AD%A2-xss-%E6%94%BB%E5%87%BB\">防止 xss 攻击</a></li>\n<li><a href=\"/docs/team-style-cn/#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9E-dom\">在组件中获取真实 dom</a></li>\n<li><a href=\"/docs/team-style-cn/#%E5%87%8F%E5%B0%91%E9%AD%94%E6%B3%95%E6%95%B0%E5%AD%97\">减少魔法数字</a></li>\n<li><a href=\"/docs/team-style-cn/#event-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B\">Event 事件对象类型</a></li>\n<li><a href=\"/docs/team-style-cn/#%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%8F%96%E4%BB%A3-state-%E7%8A%B6%E6%80%81\">使用私有属性取代 state 状态</a></li>\n<li><a href=\"/docs/team-style-cn/#%E4%BB%A3%E7%A0%81%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E6%80%9D%E8%80%83\">代码细粒度的思考</a></li>\n<li><a href=\"/docs/team-style-cn/#%E5%8F%AF%E4%BB%A5%E4%B8%8D%E6%8C%82%E5%9C%A8%E8%BD%BD%E7%BB%84%E4%BB%B6%E5%86%85%E9%83%A8%E7%9A%84%EF%BC%8C%E5%B0%BD%E9%87%8F%E4%B8%8D%E8%A6%81%E6%94%BE%E5%9C%A8%E7%BB%84%E4%BB%B6%E5%86%85%E9%83%A8\">可以不挂在载组件内部的，尽量不要放在组件内部</a></li>\n</ul>","frontmatter":{"title":{"zh_CN":"团队代码风格","en_US":"团队代码风格"},"order":1,"type":"入门"},"fields":{"path":"/docs/team-style.zh-CN.md","slug":"/docs/team-style-cn","modifiedTime":1571301264870,"avatarList":[{"href":"/xiexingen","text":"\n        xiexingen\n","src":"https://avatars0.githubusercontent.com/u/7939085?s=40&amp;v=4"}]}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":{"zh_CN":"使用 TypeScript","en_US":"使用 TypeScript"},"order":7,"type":"进阶","time":null},"fields":{"slug":"/docs/uset-typescript-cn","path":"/docs/uset-typescript.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"UI 测试","en_US":"UI 测试"},"order":15,"type":"进阶","time":null},"fields":{"slug":"/docs/ui-test-cn","path":"/docs/ui-test.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"更换主题","en_US":"更换主题"},"order":14,"type":"进阶","time":null},"fields":{"slug":"/docs/theme-cn","path":"/docs/theme.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"团队代码风格","en_US":"团队代码风格"},"order":1,"type":"入门","time":null},"fields":{"slug":"/docs/team-style-cn","path":"/docs/team-style.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"修改样式","en_US":"修改样式"},"order":6,"type":"开发","time":null},"fields":{"slug":"/docs/style-cn","path":"/docs/style.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"和服务端进行交互","en_US":"和服务端进行交互"},"order":7,"type":"开发","time":null},"fields":{"slug":"/docs/server-cn","path":"/docs/server.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"设计资源","en_US":"设计资源"},"order":23,"type":"其他","time":null},"fields":{"slug":"/docs/resource-cn","path":"/docs/resource.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"新增页面","en_US":"新增页面"},"order":4,"type":"开发","time":null},"fields":{"slug":"/docs/new-page-cn","path":"/docs/new-page.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"新增业务组件","en_US":"新增业务组件"},"order":5,"type":"开发","time":null},"fields":{"slug":"/docs/new-component-cn","path":"/docs/new-component.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"Mock 和联调","en_US":"Mock 和联调"},"order":13,"type":"开发","time":null},"fields":{"slug":"/docs/mock-api-cn","path":"/docs/mock-api.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"引入外部模块","en_US":"引入外部模块"},"order":8,"type":"开发","time":null},"fields":{"slug":"/docs/import-cn","path":"/docs/import.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"国际化","en_US":"国际化"},"order":13,"type":"进阶","time":null},"fields":{"slug":"/docs/i18n-cn","path":"/docs/i18n.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"开始使用","en_US":"开始使用"},"order":0,"type":"入门","time":null},"fields":{"slug":"/docs/getting-started-cn","path":"/docs/getting-started.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"社区推荐","en_US":"社区推荐"},"order":24,"type":"其他","time":null},"fields":{"slug":"/docs/from-community-cn","path":"/docs/from-community.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"常见问题","en_US":"常见问题"},"order":22,"type":"入门","time":null},"fields":{"slug":"/docs/faq-cn","path":"/docs/faq.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"错误处理","en_US":"错误处理"},"order":17,"type":"进阶","time":null},"fields":{"slug":"/docs/error-handle-cn","path":"/docs/error-handle.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"部署","en_US":"部署"},"order":2,"type":"构建和部署","time":null},"fields":{"slug":"/docs/deploy-cn","path":"/docs/deploy.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"更新日志","en_US":"更新日志"},"order":21,"type":"其他","time":null},"fields":{"slug":"/docs/changelog-cn","path":"/docs/changelog.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"构建","en_US":"构建"},"order":1,"type":"构建和部署","time":null},"fields":{"slug":"/docs/build-cn","path":"/docs/build.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"区块","en_US":"区块"},"order":3,"type":"开发","time":null},"fields":{"slug":"/docs/block-cn","path":"/docs/block.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"业务图标","en_US":"业务图标"},"order":12,"type":"进阶","time":null},"fields":{"slug":"/docs/biz-icon-cn","path":"/docs/biz-icon.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"可用的脚本","en_US":"可用的脚本"},"order":3,"type":"入门","time":null},"fields":{"slug":"/docs/available-script-cn","path":"/docs/available-script.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"权限管理","en_US":"权限管理"},"order":24,"type":"进阶","time":null},"fields":{"slug":"/docs/authority-management-cn","path":"/docs/authority-management.zh-CN.md"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/team-style-cn","type":"/docs/"}}}