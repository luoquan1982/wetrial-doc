{"componentChunkName":"component---src-templates-docs-tsx","path":"/docs/server-cn","webpackCompilationHash":"02104d362a19dbd2678b","result":{"data":{"markdownRemark":{"html":"<p>Wetrial-Template 是一套基于 React 技术栈的单页面应用，我们提供的是前端代码和本地模拟数据的开发模式，通过 API 的形式和任何技术栈的服务端应用一起工作。下面将简单介绍和服务端交互的基本写法。</p>\n<h2 id=\"前端请求流程\">前端请求流程<a href=\"#%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B\" aria-hidden class=\"anchor\">#</a></h2>\n<p>在 Wetrial-Template 中，一个完整的前端 UI 交互到服务端处理流程是这样的：</p>\n<ol>\n<li>UI 组件交互操作；</li>\n<li>调用 model 的 effect；</li>\n<li>调用统一管理的 service 请求函数；</li>\n<li>使用封装的 request.ts 发送请求；</li>\n<li>获取服务端返回；</li>\n<li>然后调用 reducer 改变 state；</li>\n<li>更新 model。</li>\n</ol>\n<p>从上面的流程可以看出，为了方便管理维护，统一的请求处理都放在 <code>services</code> 文件夹中，并且一般按照 model 维度进行拆分文件，如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">services/\n  user.ts\n  api.ts\n  ...</code></pre></div>\n<p>其中，<code>@/utils/request.ts</code> 是基于 axios 的封装，便于统一处理 POST，GET 等请求参数，请求头，以及错误提示信息等。具体可以参看 <a href=\"https://github.com/wetrial/wetrial/blob/master/src/request.ts\">request.ts</a>。</p>\n<p>例如在 services 中的一个请求用户信息的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// services/user.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">get</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/request'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">queryCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/currentUser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// models/user.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> queryCurrent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/user'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\neffects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>queryCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"处理异步请求\">处理异步请求<a href=\"#%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82\" aria-hidden class=\"anchor\">#</a></h3>\n<p>在处理复杂的异步请求的时候，很容易让逻辑混乱，陷入嵌套陷阱，所以 Wetrial-Template 的底层基础框架 <a href=\"https://github.com/dvajs/dva\">dva</a> 使用 <code>effect</code> 的方式来管理同步化异步请求：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">effects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'changeLoading'</span><span class=\"token punctuation\">,</span>\n      payload<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 异步请求 1</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>queryFakeList<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'save'</span><span class=\"token punctuation\">,</span>\n      payload<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 异步请求 2</span>\n    <span class=\"token keyword\">const</span> response2 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>queryFakeList2<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'save2'</span><span class=\"token punctuation\">,</span>\n      payload<span class=\"token punctuation\">:</span> response2<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'changeLoading'</span><span class=\"token punctuation\">,</span>\n      payload<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>通过 <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/function*\">generator</a> 和 <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/yield\">yield</a> 使得异步调用的逻辑处理跟同步一样，更多可参看 <a href=\"https://github.com/dvajs/dva/blob/master/docs/GettingStarted.md#async-logic\">dva async logic</a>。</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/server-cn/#%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B\">前端请求流程</a></li>\n</ul>","frontmatter":{"title":{"zh_CN":"和服务端进行交互","en_US":"和服务端进行交互"},"order":7,"type":"开发"},"fields":{"path":"/docs/server.zh-CN.md","slug":"/docs/server-cn","modifiedTime":1571301264870,"avatarList":[{"href":"/xiexingen","text":"\n        xiexingen\n","src":"https://avatars0.githubusercontent.com/u/7939085?s=40&amp;v=4"}]}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":{"zh_CN":"使用 TypeScript","en_US":"使用 TypeScript"},"order":7,"type":"进阶","time":null},"fields":{"slug":"/docs/uset-typescript-cn","path":"/docs/uset-typescript.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"UI 测试","en_US":"UI 测试"},"order":15,"type":"进阶","time":null},"fields":{"slug":"/docs/ui-test-cn","path":"/docs/ui-test.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"更换主题","en_US":"更换主题"},"order":14,"type":"进阶","time":null},"fields":{"slug":"/docs/theme-cn","path":"/docs/theme.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"团队代码风格","en_US":"团队代码风格"},"order":1,"type":"入门","time":null},"fields":{"slug":"/docs/team-style-cn","path":"/docs/team-style.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"修改样式","en_US":"修改样式"},"order":6,"type":"开发","time":null},"fields":{"slug":"/docs/style-cn","path":"/docs/style.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"和服务端进行交互","en_US":"和服务端进行交互"},"order":7,"type":"开发","time":null},"fields":{"slug":"/docs/server-cn","path":"/docs/server.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"设计资源","en_US":"设计资源"},"order":23,"type":"其他","time":null},"fields":{"slug":"/docs/resource-cn","path":"/docs/resource.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"新增页面","en_US":"新增页面"},"order":4,"type":"开发","time":null},"fields":{"slug":"/docs/new-page-cn","path":"/docs/new-page.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"新增业务组件","en_US":"新增业务组件"},"order":5,"type":"开发","time":null},"fields":{"slug":"/docs/new-component-cn","path":"/docs/new-component.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"Mock 和联调","en_US":"Mock 和联调"},"order":13,"type":"开发","time":null},"fields":{"slug":"/docs/mock-api-cn","path":"/docs/mock-api.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"引入外部模块","en_US":"引入外部模块"},"order":8,"type":"开发","time":null},"fields":{"slug":"/docs/import-cn","path":"/docs/import.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"国际化","en_US":"国际化"},"order":13,"type":"进阶","time":null},"fields":{"slug":"/docs/i18n-cn","path":"/docs/i18n.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"开始使用","en_US":"开始使用"},"order":0,"type":"入门","time":null},"fields":{"slug":"/docs/getting-started-cn","path":"/docs/getting-started.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"社区推荐","en_US":"社区推荐"},"order":24,"type":"其他","time":null},"fields":{"slug":"/docs/from-community-cn","path":"/docs/from-community.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"常见问题","en_US":"常见问题"},"order":22,"type":"入门","time":null},"fields":{"slug":"/docs/faq-cn","path":"/docs/faq.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"错误处理","en_US":"错误处理"},"order":17,"type":"进阶","time":null},"fields":{"slug":"/docs/error-handle-cn","path":"/docs/error-handle.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"部署","en_US":"部署"},"order":2,"type":"构建和部署","time":null},"fields":{"slug":"/docs/deploy-cn","path":"/docs/deploy.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"更新日志","en_US":"更新日志"},"order":21,"type":"其他","time":null},"fields":{"slug":"/docs/changelog-cn","path":"/docs/changelog.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"构建","en_US":"构建"},"order":1,"type":"构建和部署","time":null},"fields":{"slug":"/docs/build-cn","path":"/docs/build.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"区块","en_US":"区块"},"order":3,"type":"开发","time":null},"fields":{"slug":"/docs/block-cn","path":"/docs/block.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"业务图标","en_US":"业务图标"},"order":12,"type":"进阶","time":null},"fields":{"slug":"/docs/biz-icon-cn","path":"/docs/biz-icon.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"可用的脚本","en_US":"可用的脚本"},"order":3,"type":"入门","time":null},"fields":{"slug":"/docs/available-script-cn","path":"/docs/available-script.zh-CN.md"}}},{"node":{"frontmatter":{"title":{"zh_CN":"权限管理","en_US":"权限管理"},"order":24,"type":"进阶","time":null},"fields":{"slug":"/docs/authority-management-cn","path":"/docs/authority-management.zh-CN.md"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/server-cn","type":"/docs/"}}}